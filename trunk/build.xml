<?xml version="1.0" encoding="UTF-8"?>
<project name="brown-seasr" default="dist" basedir=".">

    <!-- Default settings for the 'upload-components' task -->
    <property name="server" value="localhost"/>
    <property name="port" value="1714"/>
    <property name="user" value="admin"/>
    <property name="pw" value="admin"/>

    <property name="project.name" value="brown-seasr"/>

    <!--
    =================================
    ENVIRONMENT CHECKS
    ====================================
    -->
    <!-- Check whether Java 1.5+ is being used -->
    <condition property="using.java.1.5">
        <or>
            <equals arg1="${ant.java.version}" arg2="1.5"/>
            <equals arg1="${ant.java.version}" arg2="1.6"/>
        </or>
    </condition>

    <condition property="using.ant.1.7">
        <or>
            <contains string="${ant.version}" substring="1.7"/>
            <contains string="${ant.version}" substring="1.8"/>
        </or>
    </condition>

    <fail message="This package requires Ant 1.7." unless="using.ant.1.7"/>
    <fail message="This package requires at least Java 5. Please set JAVA_HOME to point to where JDK 1.5 or higher is installed."
          unless="using.java.1.5"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="test.lib.dir" value="${basedir}/lib/test"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="lib.devkit.dir" value="${basedir}/devkit"/>
    <property name="mau.dir" value="${build.dir}/mau"/>
    <property name="devkit.dir" value="${basedir}/devkit"/>
    <property name="test.root.dir" value="${basedir}/test"/>
    <property name="test.classes.dir" value="${build.dir}/test/classes"/>
    <property name="test.logs.dir" value="${test.root.dir}/log"/>
    <property name="test.output.dir" value="${test.root.dir}/output"/>

    <property name="components.jar.file" value="${project.name}-components.jar"/>

    <path id="src.code.dirs">
        <dirset dir="${basedir}" includes="src/main/**/*"/>
    </path>

    <path id="src.test.root.dirs">
        <dirset dir="${basedir}" includes="src/test/**/*"/>
    </path>

    <path id="classpath.build">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${test.lib.dir}" includes="**/*.jar"/>
    </path>
    
    <path id="classpath.runtime">
        <path refid="classpath.build"/>
        <fileset dir="${dist.dir}" includes="*.jar"/>
        <fileset dir="${devkit.dir}" includes="*.jar"/>
    </path>

    <path id="classpath.devkit">
        <path refid="classpath.build"/>
        <fileset dir="${lib.devkit.dir}" includes="*.jar"/>
        <path location="${classes.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="${dist.dir}" includes="*.jar"/>
    </path>

    <target name="init" description="-> creates required folders">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${mau.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${test.root.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${test.logs.dir}"/>
        <mkdir dir="${test.output.dir}"/>
    </target>

    <target name="clean" description="-> removes build artifacts">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${test.root.dir}"/>
        <delete dir="./log"/>
    </target>

    <target name="compile" depends="init" description="-> compiles all components">
        <javac source="1.5" debug="on" debuglevel="lines,vars,source" destdir="${classes.dir}">
            <src refid="src.code.dirs"/>
            <classpath refid="classpath.build"/>
        </javac>
    <copy todir="${classes.dir}" includeEmptyDirs="no">
            <fileset dir="${basedir}">
                <include name="src-*/**/*.properties"/>
                <include name="src-*/**/*.xml"/>
                <include name="src-*/**/*.vm"/>
                <include name="src-*/**/*.swf"/>
                <include name="src-*/**/*.list"/>
                <include name="src-*/**/*.jar"/>
            </fileset>
            <regexpmapper from="^src-[^/]+/(.+)$" to="\1"/>
        </copy>
    </target>

    <target name="dist" depends="compile" description="-> creates components jar file">
        <jar destfile="${dist.dir}/${components.jar.file}" basedir="${classes.dir}"/>
    </target>

    <target name="compile-tests" depends="dist" description="-> compiles the unit tests">
        <!-- compile -->
        <javac debug="on" debuglevel="lines,vars,source" destdir="${test.classes.dir}">
            <src refid="src.test.root.dirs"/>
            <classpath refid="classpath.runtime"/>
        </javac>
        <!-- include other files that should be available to runtime classpath-->
        <copy todir="${test.classes.dir}" includeEmptyDirs="no">
            <fileset dir="${basedir}">
                <include name="src-test/**/*.properties"/>
                <include name="src-test/**/*.xml"/>
                <include name="src-test/**/*.vm"/>
                <include name="src-test/**/*.list"/>
            </fileset>
            <regexpmapper from="^src-test/(.+)$" to="\1"/>
        </copy>
    </target>

    <target name="run-tests" depends="compile-tests"
            description="-> runs the unit tests and generates reports">
        <mkdir dir="${test.logs.dir}/xml"/>
        <junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed" showoutput="yes">
            <jvmarg value="-Duser.language=en"/>
            <classpath>
                <path refid="classpath.build"/>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${test.logs.dir}/xml">
                <fileset dir="${test.classes.dir}">
                    <exclude name="**/SEASRComponentTest.class"/>
                    <include name="**/*Test.class"/>
                    <exclude name="**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.logs.dir}/xml">
            <fileset dir="${test.logs.dir}/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.root.dir}"/>
        </junitreport>
        <echo message="Report generated at:             file://${test.root.dir}/junit-noframes.html"/>
        <fail message="One or more tests failed." if="test.failed"/>
    </target>

    <target name="upload-components" depends="compile"
            description="-> uploads and installs components to a Meandre Infrastructure server running on the local machine">
        <java classname="org.meandre.tools.components.InstallComponentsCMD" fork="yes" maxmemory="1024m">
            <classpath refid="classpath.devkit"/>
            <jvmarg value="-showversion"/>
            <arg value="--class-dir"/>
            <arg value="${classes.dir}"/>
            <arg value="--lib-dir"/>
            <arg value="${lib.dir}"/>
            <arg value="--tmp-dir"/>
            <arg value="${build.dir}"/>
            <arg value="--meandre-host"/>
            <arg value="${server}"/>
            <arg value="--meandre-port"/>
            <arg value="${port}"/>
            <arg value="--meandre-username"/>
            <arg value="${user}"/>
            <arg value="--meandre-password"/>
            <arg value="${pw}"/>
        </java>
    </target>

    <target name="compile-zz" depends="" description="-> Compiles .zz files found in main/zz against the components found in the infrastructure.">
        <apply executable="java">
            <arg value="-jar"/>
            <arg value="devkit/zzc-1.4.8.jar"/>
            <fileset dir="src/main/zz" includes="**/*.zz"/>
        </apply>
        <move todir="${mau.dir}">
            <fileset dir="src/main/zz" includes="**/*.mau"/>
        </move>
        <apply executable="java">
            <arg value="-jar"/>
            <arg value="devkit/zzc-1.4.8.jar"/>
            <fileset dir="src/test/zz" includes="**/*.zz"/>
        </apply>
        <move todir="${mau.dir}">
            <fileset dir="src/test/zz" includes="**/*.mau"/>
        </move>
    </target>

    

    <target name="execute-flow" depends="" description="-> Executes the .mau file at the given path. Use with -Dscript=path/to/script.mau">
        <!--quelling an IDE warning-->
        <property name="script" value=""/>
        <exec executable="java">
            <arg value="-jar"/>
            <arg value="devkit/zzre-1.4.8.jar"/>
            <arg value="${script}"/>
        </exec>
    </target>

</project>
